type Vehicle {
    make: String!
    model: String!
    year: Int!
    licensePlate: String!
    insuranceProof: String!
}

type Location {
    address: String!
    city: String!
    postalCode: String!
}


type User {
    id: ID!
    username: String!
    email: String!
    userId: String!
    userType: String!
    status:String!
    profilePicture: String  
    phoneNumber: String      
    driverInfo: DriverInfo
    businessInfo: BusinessInfo
}

type AuthPayload {
    token: String!
    userId: ID!
    userType: String!  # Added userType to the AuthPayload
}

type DriverInfo {
    id:ID!
    driverLicense: String!
    vehicle: Vehicle
}

# Business info type
type BusinessInfo {
    id:ID!
    businessLicense: String!
    businessType: String!
    businessLocation: Location
}

type UserAll {
  id: ID!
  userId: String!
  username: String!
  email: String!
  userType: String
  status: String
  driverInfo: DriverInfo
  businessInfo: BusinessInfo
}

type MenuItem {
    id:ID!
    itemId: String!
    name: String!
    description: String
    price: Float!
    quantity: Int!
    availabilityStatus: Boolean!
    imageUrl: String
    unitOfMeasurement: String
    allergenInformation: String
    bakedGoodsType: String
    category: String!
    businessId: ID!
    adminApprovalStatus: Boolean
    businessType: String
}



input VehicleInput {
    make: String!
    model: String!
    year: Int!
    licensePlate: String!
    insuranceProof: String!
}

input LocationInput {
    address: String!
    city: String!
    postalCode: String!
}

input MenuItemInput {
    id:Int
    itemId:String
    name: String
    description: String
    price: Float
    quantity: Int
    category: String
    availabilityStatus: Boolean
    imageUrl: String
    unitOfMeasurement: String
    allergenInformation: String
    bakedGoodsType: String
}

type DeleteResponse {
    success: Boolean!
    message: String!
}

type UpdateMenuItemResponse {
    success: Boolean!
    message: String!
    menuItem: MenuItem
}

 type PaymentIntent {
        id: String!
        clientSecret: String!
        status: String
}

type Query {
        getUser(id: ID!, userType: String!): User
        getAllUsers: [UserAll!]!     
        getMenuItems(businessId: ID!): [MenuItem]  
        getMenuItemsList: [MenuItem]
   
}

type Mutation {
 register(
       username: String!,
        email: String!,
        password: String!,
        userType: String!,
        phoneNumber: String,
        profilePicture: String,
        driverLicense: String,     
        vehicle: VehicleInput,      
        businessLicense: String,
        businessType: String,
        businessLocation: LocationInput
    ): User
    login(email: String!, password: String!, userType: String!): AuthPayload 
    approveUser(id: ID!): User
    rejectUser(id: ID!): User
    addMenuItem(
        name: String!,
        description: String,
        price: Float!,
        quantity: Int!,
        availabilityStatus: Boolean!,
        imageUrl: String,
        unitOfMeasurement: String,
        allergenInformation: String,
        category: String!,
        businessId: ID!,
        bakedGoodsType: String,
        size: String,
        expiryDate: String,
        specialInstructions: String
    ): MenuItem
    deleteMenuItem(itemId: String!): DeleteResponse!
    updateMenuItem(id: ID!, input: MenuItemInput!): MenuItem
    createPaymentIntent(description: String!, amount: Float!): PaymentIntent
    capturePayment(orderId: String!): PaymentIntent

}
